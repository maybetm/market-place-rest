/**
 * Набор синхронных тестов, с регистрацией Администратора, Клиента и Магазина.
 * Проведения оплаты, добавлением и удалением товара, проверки части безопасности.
 * Без учёта высокой нагрузки, блокировки таблиц, одновременной покупки товара несколькими пользователями или
 * покупки товара, который уже удалили. 
 *
 * @author zebzeev-sv
 * @version 12.09.2019 23:02
 */

package com.maybetm.integration;

/*
	1. Регистрация пользователя с ролью Администратор.
	2. Идентификация. Получение jwt ключа.
	3. Удаление ключа из бд.
	4. Ещё одна попытка авторизации. Должны получить сообщение об ошибке.

	1. Регистрируем пользователя с ролью "Магазин".
	2. Добавляем ~5 товаров в корзину.
	3. Удаляем товар.
	4. Проверяем количество товаров. Должно измениться, в зависимости от того сколько удалили.
	5. Изменяем количество одного из добавленных товаров.
	6. Проверяем информацию по этому товару. Вызываем общий метод, для получения всех товаров,
	и по конкретному id продукта.
	7. Удаляем этот товар.
	8. Вызываем общий метод, для поиска товаров. Товара не должно быть.
	9. Пытаемся найти удалённый товар по его id. Должно вернуться исключение или пустота.
	10. Ищем товар по его названию. Если находим, получаем его id и сверяем с тем id товара, корторый мы удалили.
	11. Нужно как-то запомнить количество товаров, которое осталось в магазине, для следующего кейса.
	12. Удаляем токен.
	13. Пробуем выполнить какой-нибудь рест метод, который доступен только авторизированному пользователю,
	с ролью "Магазин".
	14. Проверяем ответ, должна вернуться ошибка.
	15. После успешного прохождения возвращаем для следующего кейса объект с информацией о пользователе с ролью "магазин".

	1. Регистрируем пользователя с ролью "Клиент".
	2. Обновляем данные пользователя, и проверяем результат.
	3. Смотрим количество товаров. Должно быть столько-же, сколько оставил после себя прошлый тест с магазином.
	4. Добавляем товары в корзину пользователя. Скупаем все имеющиеся товары.
	5. Получаем данные корзины. Проверяем количество продуктов лежащих в корзине.
	6. Удаляем пользовательский токен.
	7. Пытаемся получить ещё раз данные корзины. Должны получить ошибку доступа.
	8. Ещё раз получаем пользовательский токен.
	9. Получаем данные корзины. Проверяем возможна ли покупка.
	10. Выполняем создание платежа.
	11. Корзина должна быть пуста.
	12. Проверяем изменилось ли количество товаров на торговой площадке. Количество всех купленных товаров должно быть
	равно нулю.
	13. Удаляем токен.
	14. Пытаемся ещё раз авторизоваться. Должны получить ошибку доступа.
	15. Получаем токен.
	16. Пытаемся получить данные корзины. Корзина должна быть пустой.
	17. Добавляем ещё какую-то позицию в корзину.
	18. Пытаемся оплатить. Должны получить ошибку. Так-как товаров нет на складе.
	19. Удаляем токен пользователя.
	20. Пытаемся получить данные корзины, ловим ошибку.
	21. Кейс должен вернуть объект пользователя после успешного прохождения.


	В этом кейсе, у нас имеется 1 клиент, 1 магази и 1 администратор

	1. Получаем токен, для пользователя с ролью Администратор.
	2. Смотрим количество зарегестрированных пользователей в системе. Должен быть 1 клиент, 1 магазин и администратор.
	3. Удаляем пользователя с ролью магазин.
	4. Проверяем общее количество товаров на площадке. Товаров вообще не должно быть, потому что магазин удалён с площадки.
	5. Проверяем корзину пользователя. Она тоже должна быть пустой. Из Бд должны удалиться продукты,
	связанные с этим магазином. Должны удалиться из каждой таблички по связи.
	Не должно происходить нарушения целостности.
	6. Удаляем токен администратора.
	7. Получаем токен пользователя.
	8. Заходим в корзину. Не должно быть товаров.
	9. Удаляем токен пользователя.
	10. Получаем токен Администратора.
	11. Удаляем учетную запись пользователя. И все связанные с ним данные. Кроме платёжной статистики.
	12. Удаляем токен Администроатора.
	13. Пытаемся авторизоваться пользователем с ролью "клиент". Должна родиться ошибка идентификации пользователя.
	14. Получаем токен для Администратора.
	15. Удаляем учётную запись Администора.
	16. Пытаемся выполнить идентификацию пользователя с ролью Администратора и получить токен.
	17. Получаем ошибку и считаем тест пройденным.
 */